package main

import "fmt"
import "time"
//import "io/ioutil"
//import "strconv"
//import "strings"
import "math"

/*
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
*/


func main(){
	starttime := time.Now()
	
	divisors := 1
	triangleNumber := uint64(1)
	
	for i:=2; divisors<500; i++ {
		triangleNumber += uint64(i)
		divisors = numDivisors(triangleNumber)
	}
	
	fmt.Println(triangleNumber)
	fmt.Println(time.Since(starttime))		
}

func numDivisors(num uint64) int {
	
	count := 0
	//only need to go to square root
	limit := uint64(math.Sqrt(float64(num)))
	
	for i := 1; uint64(i) <= limit; i++ {
		if (num%uint64(i)) == 0 {
			//increase by two because if mod is zero that means there are two 
			count += 2 
		}
	}
	
	return count
}